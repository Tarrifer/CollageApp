{[
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday",
].map((day) => (
  <View key={day} style={styles.dayEntriesContainer}>
    <TouchableOpacity
      style={[styles.dayButton, { backgroundColor: "purple" }]}
      onPress={() => toggleDayEntriesVisibility(day)}
    >
      <View style={styles.dayHeader}>
        <Text style={styles.dayButtonText}>
          {dayEntriesVisibility[day] ? (
            <AntDesign
              name="caretup"
              size={20}
              color="white"
              style={{ paddingLeft: 10 }}
            />
          ) : (
            <AntDesign
              name="caretdown"
              size={20}
              color="white"
              style={{ paddingLeft: 10 }}
            />
          )}
        </Text>
        <Text style={styles.dayButtonText}>
          {day} Entries ({departments.filter((d) => d.day === day).length})
        </Text>
        {dayEntriesVisibility[day] && (
          <View style={styles.iconsContainer}>
            <TouchableOpacity
              onPress={() =>
                editIndex !== null ? handleSave(editIndex) : handleEdit(index)
              }
            >
              <AntDesign
                name={editIndex !== null ? "save" : "edit"}
                size={24}
                color="white"
                style={{ paddingHorizontal: 10 }}
              />
            </TouchableOpacity>

            <TouchableOpacity onPress={() => handleDelete(index)}>
              <AntDesign name="delete" size={24} color="white" />
            </TouchableOpacity>
          </View>
        )}
      </View>
    </TouchableOpacity>

    {dayEntriesVisibility[day] &&
      departments
        .filter((dept) => dept.day === day)
        .map((dept, index) => (
          <View key={index} style={styles.card}>
            <Text style={styles.cardText}>Time: {dept.time}</Text>
            <Text style={styles.cardText}>Subject Type: {dept.subjectType}</Text>
            <Text style={styles.cardText}>Subject Name: {dept.subjectName}</Text>
            <Text style={styles.cardText}>Teacher Name: {dept.teacherName}</Text>
          </View>
        ))}
  </View>
))}

const styles = StyleSheet.create({
  dayButton: {
    padding: 10,
    margin: 5,
    borderRadius: 5,
    justifyContent: "center",
    alignItems: "center",
  },
  dayButtonText: {
    color: "white",
    fontWeight: "bold",
  },
  dayHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  iconsContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  // ...other styles
});




import React, { useState } from "react";
import {
  ScrollView,
  TouchableOpacity,
  Text,
  View,
  Alert,
  StyleSheet,
} from "react-native";
import { Picker as RNPicker } from "@react-native-picker/picker";
import times from "../../database/Time.json";
import { AntDesign } from "@expo/vector-icons";

const DayButton = ({ day, selected, onPress }) => {
  return (
    <TouchableOpacity
      style={[
        styles.dayButton,
        { backgroundColor: selected ? "blue" : "grey" },
      ]}
      onPress={onPress}
    >
      <Text style={styles.dayButtonText}>{day}</Text>
    </TouchableOpacity>
  );
};

const AdminTimetableView = () => {
  const [selectedDays, setSelectedDays] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [selectedTime, setSelectedTime] = useState(times[0]);
  const [selectedSubjectType, setSelectedSubjectType] = useState("Null");
  const [selectedSubjectName, setSelectedSubjectName] = useState(
    "Choose SubjectType First"
  );
  const [dayEntriesVisibility, setDayEntriesVisibility] = useState({
    Monday: false,
    Tuesday: false,
    Wednesday: false,
    Thursday: false,
    Friday: false,
    Saturday: false,
    Sunday: false,
  });
  const [editIndex, setEditIndex] = useState(null);

  const subjectTypes = ["Null", "Changable", "Unchangable"];
  const subjectNames = [
    "Choose subject name",
    "Subject Name 1",
    "Subject Name 2",
    "Subject Name 3",
    "Subject Name 4",
  ];

  const toggleDay = (day) => {
    if (selectedDays.includes(day)) {
      setSelectedDays(selectedDays.filter((item) => item !== day));
    } else {
      setSelectedDays([...selectedDays, day]);
    }
  };

  const toggleDayEntriesVisibility = (day) => {
    setDayEntriesVisibility((prevState) => ({
      ...prevState,
      [day]: !prevState[day],
    }));
  };

  const isTimeSlotAvailable = (day, time) => {
    return !departments.some(
      (dept, index) =>
        dept.day === day && dept.time === time && index !== editIndex
    );
  };

  const findNextAvailableSlot = () => {
    for (let day of [
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
      "Sunday",
    ]) {
      for (let time of times) {
        if (isTimeSlotAvailable(day, time)) {
          return { day, time };
        }
      }
    }
    return null;
  };

  const addDepartment = () => {
    if (
      (selectedSubjectType === "Changable" ||
        selectedSubjectType === "Unchangable") &&
      selectedSubjectName === "Choose subject name"
    ) {
      Alert.alert("Please Choose a subject name");
      return;
    }

    let allTimeSlotsAvailable = true;

    selectedDays.forEach((day) => {
      if (!isTimeSlotAvailable(day, selectedTime)) {
        Alert.alert(
          `${day} is not vacant at ${selectedTime} to add this subject`
        );
        allTimeSlotsAvailable = false;
      }
    });

    if (allTimeSlotsAvailable) {
      const newEntries = selectedDays.map((day) => ({
        day,
        time: selectedTime,
        subjectType: selectedSubjectType,
        subjectName:
          selectedSubjectType === "Null" ? "Null" : selectedSubjectName,
        teacherName: "Teacher Name", // Replace with actual teacher name
        editMode: false, // Initialize edit mode as false
      }));
      setDepartments([...departments, ...newEntries]);

      // Show success alert
      Alert.alert("Entries have been added");

      // Automatically open day entries
      selectedDays.forEach((day) => {
        setDayEntriesVisibility((prevState) => ({
          ...prevState,
          [day]: true,
        }));
      });

      // Reset state
      setSelectedDays([]);
      setSelectedSubjectType("Null");
      setSelectedSubjectName("Choose SubjectType First");
    }
  };

  const handleEdit = (index) => {
    const dept = departments[index];
    setSelectedDays([dept.day]);
    setSelectedTime(dept.time);
    setSelectedSubjectType(dept.subjectType);
    setSelectedSubjectName(dept.subjectName);
    setEditIndex(index); // Set the edit index to the current card's index
  };

  const handleSave = (index) => {
    if (selectedDays.length === 0) {
      Alert.alert("Please select a day.");
      return;
    }

    if (
      (selectedSubjectType === "Changable" ||
        selectedSubjectType === "Unchangable") &&
      selectedSubjectName === "Choose subject name"
    ) {
      Alert.alert("Please Choose a subject name");
      return;
    }

    let allTimeSlotsAvailable = true;
    selectedDays.forEach((day) => {
      if (!isTimeSlotAvailable(day, selectedTime)) {
        allTimeSlotsAvailable = false;
        Alert.alert(
          `${day} is not vacant at ${selectedTime} to add this subject`,
          "Do you want to shift the subject to another time or day?",
          [
            {
              text: "Yes",
              onPress: () => {
                const nextSlot = findNextAvailableSlot();
                if (nextSlot) {
                  setSelectedDays([nextSlot.day]);
                  setSelectedTime(nextSlot.time);
                  handleSave(index);
                } else {
                  Alert.alert("No vacant time of any day.");
                }
              },
            },
            {
              text: "No",
              style: "cancel",
            },
          ]
        );
      }
    });

    if (allTimeSlotsAvailable) {
      const updatedDepartments = [...departments];
      updatedDepartments[index] = {
        ...updatedDepartments[index],
        day: selectedDays[0], // Assuming only one day is selected for edit
        time: selectedTime,
        subjectType: selectedSubjectType,
        subjectName:
          selectedSubjectType === "Null" ? "Null" : selectedSubjectName,
      };
      setDepartments(updatedDepartments);
      Alert.alert("Entry has been updated");

      // Reset state
      setSelectedDays([]);
      setSelectedSubjectType("Null");
      setSelectedSubjectName("Choose SubjectType First");
      setEditIndex(null);
    }
  };

  const handleDelete = (index) => {
    Alert.alert(
      "Are you sure you want to delete?",
      "",
      [
        {
          text: "Cancel",
          style: "cancel",
        },
        {
          text: "Yes",
          onPress: () => {
            setDepartments(departments.filter((_, i) => i !== index));
          },
        },
      ],
      { cancelable: false }
    );
  };

  return (
    <ScrollView style={{ backgroundColor: "#FFF5EE" }}>
      <ScrollView horizontal contentContainerStyle={styles.dayPickerContainer}>
        {[
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday",
        ].map((day) => (
          <DayButton
            key={day}
            day={day}
            selected={selectedDays.includes(day)}
            onPress={() => toggleDay(day)}
          />
        ))}
      </ScrollView>

      {selectedDays.length > 0 && (
        <View>
          <View style={styles.pickerContainer}>
            <RNPicker
              selectedValue={selectedSubjectType}
              onValueChange={(itemValue) => {
                setSelectedSubjectType(itemValue);
                if (itemValue === "Null") {
                  setSelectedSubjectName("Choose SubjectType First");
                } else {
                  setSelectedSubjectName("Choose subject name");
                }
              }}
            >
              {subjectTypes.map((type, index) => (
                <RNPicker.Item key={index} label={type} value={type} />
              ))}
            </RNPicker>
          </View>

          <View style={styles.pickerContainer}>
            <RNPicker
              selectedValue={selectedSubjectName}
              onValueChange={(itemValue) => setSelectedSubjectName(itemValue)}
              enabled={selectedSubjectType !== "Null"}
            >
              {selectedSubjectType === "Null" ? (
                <RNPicker.Item
                  label="Choose SubjectType First"
                  value="Choose SubjectType First"
                  color="gray"
                />
              ) : (
                subjectNames.map((name, index) => (
                  <RNPicker.Item key={index} label={name} value={name} />
                ))
              )}
            </RNPicker>
          </View>

          <View style={styles.pickerContainer}>
            <RNPicker
              selectedValue={selectedTime}
              onValueChange={(itemValue) => setSelectedTime(itemValue)}
            >
              {times.map((time, index) => (
                <RNPicker.Item key={index} label={time} value={time} />
              ))}
            </RNPicker>
          </View>

          <TouchableOpacity
            style={styles.addButton}
            onPress={editIndex === null ? addDepartment : () => handleSave(editIndex)}
          >
            <Text style={styles.addButtonText}>{editIndex === null ? "Add" : "Save"}</Text>
          </TouchableOpacity>
        </View>
      )}

      {["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"].map(
        (day) => (
          <View key={day}>
            <TouchableOpacity
              style={styles.toggleEntriesButton}
              onPress={() => toggleDayEntriesVisibility(day)}
            >
              <Text style={styles.toggleEntriesButtonText}>
                {day} ({departments.filter((dept) => dept.day === day).length})
              </Text>
            </TouchableOpacity>
            {dayEntriesVisibility[day] && (
              <View>
                {departments
                  .filter((dept) => dept.day === day)
                  .map((dept, index) => (
                    <View key={index} style={styles.entryContainer}>
                      <Text style={styles.entryText}>
                        {dept.time} - {dept.subjectType} - {dept.subjectName} -{" "}
                        {dept.teacherName}
                      </Text>
                      <TouchableOpacity
                        style={styles.editButton}
                        onPress={() => handleEdit(index)}
                      >
                        <AntDesign name="edit" size={24} color="black" />
                      </TouchableOpacity>
                      <TouchableOpacity
                        style={styles.deleteButton}
                        onPress={() => handleDelete(index)}
                      >
                        <AntDesign name="delete" size={24} color="red" />
                      </TouchableOpacity>
                    </View>
                  ))}
              </View>
            )}
          </View>
        )
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  dayPickerContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 10,
  },
  dayButton: {
    marginHorizontal: 5,
    padding: 10,
    borderRadius: 5,
  },
  dayButtonText: {
    color: "white",
    fontWeight: "bold",
  },
  pickerContainer: {
    margin: 10,
    borderWidth: 1,
    borderColor: "grey",
    borderRadius: 5,
  },
  addButton: {
    backgroundColor: "blue",
    padding: 10,
    borderRadius: 5,
    margin: 10,
    alignItems: "center",
  },
  addButtonText: {
    color: "white",
    fontWeight: "bold",
  },
  toggleEntriesButton: {
    backgroundColor: "grey",
    padding: 10,
    borderRadius: 5,
    margin: 10,
    alignItems: "center",
  },
  toggleEntriesButtonText: {
    color: "white",
    fontWeight: "bold",
  },
  entryContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 10,
    margin: 10,
    backgroundColor: "#f0f0f0",
    borderRadius: 5,
  },
  entryText: {
    flex: 1,
  },
  editButton: {
    marginHorizontal: 5,
  },
  deleteButton: {
    marginHorizontal: 5,
  },
});

export default AdminTimetableView;





import React, { useState } from "react";
import {
  ScrollView,
  TouchableOpacity,
  Text,
  View,
  Alert,
  StyleSheet,
} from "react-native";
import { Picker as RNPicker } from "@react-native-picker/picker";
import times from "../../database/Time.json";
import { AntDesign } from "@expo/vector-icons";

const DayButton = ({ day, selected, onPress }) => {
  return (
    <TouchableOpacity
      style={[
        styles.dayButton,
        { backgroundColor: selected ? "blue" : "grey" },
      ]}
      onPress={onPress}
    >
      <Text style={styles.dayButtonText}>{day}</Text>
    </TouchableOpacity>
  );
};

const AdminTimetableView = () => {
  const [selectedDays, setSelectedDays] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [selectedTime, setSelectedTime] = useState(times[0]);
  const [selectedSubjectType, setSelectedSubjectType] = useState("Null");
  const [selectedSubjectName, setSelectedSubjectName] = useState(
    "Choose SubjectType First"
  );
  const [dayEntriesVisibility, setDayEntriesVisibility] = useState({
    Monday: false,
    Tuesday: false,
    Wednesday: false,
    Thursday: false,
    Friday: false,
    Saturday: false,
    Sunday: false,
  });
  const [editIndex, setEditIndex] = useState(null);

  const subjectTypes = ["Null", "Changable", "Unchangable"];
  const subjectNames = require("../../database/Timetable.json");

  const toggleDay = (day) => {
    if (selectedDays.includes(day)) {
      setSelectedDays(selectedDays.filter((item) => item !== day));
    } else {
      setSelectedDays([...selectedDays, day]);
    }
  };

  const toggleDayEntriesVisibility = (day) => {
    setDayEntriesVisibility((prevState) => ({
      ...prevState,
      [day]: !prevState[day],
    }));
  };

  const isTimeSlotAvailable = (day, time) => {
    return !departments.some(
      (dept, index) =>
        dept.day === day && dept.time === time && index !== editIndex
    );
  };

  const addDepartment = () => {
    if (
      (selectedSubjectType === "Changable" ||
        selectedSubjectType === "Unchangable") &&
      selectedSubjectName === "Choose subject name"
    ) {
      Alert.alert("Please Choose a subject name");
      return;
    }

    let allTimeSlotsAvailable = true;

    selectedDays.forEach((day) => {
      if (!isTimeSlotAvailable(day, selectedTime)) {
        Alert.alert(
          `${day} is not vacant at ${selectedTime} to add this subject`
        );
        allTimeSlotsAvailable = false;
      }
    });

    if (allTimeSlotsAvailable) {
      const newEntries = selectedDays.map((day) => ({
        day,
        time: selectedTime,
        subjectType: selectedSubjectType,
        subjectName:
          selectedSubjectType === "Null" ? "Null" : selectedSubjectName,
        teacherName: "Teacher Name", // Replace with actual teacher name
        editMode: false, // Initialize edit mode as false
      }));
      setDepartments([...departments, ...newEntries]);

      // Show success alert
      Alert.alert("Entries have been added");

      // Automatically open day entries
      selectedDays.forEach((day) => {
        setDayEntriesVisibility((prevState) => ({
          ...prevState,
          [day]: true,
        }));
      });

      // Reset state
      setSelectedDays([]);
      setSelectedSubjectType("Null");
      setSelectedSubjectName("Choose SubjectType First");
    }
  };

  const handleEdit = (index) => {
    const dept = departments[index];
    setSelectedDays([dept.day]);
    setSelectedTime(dept.time);
    setSelectedSubjectType(dept.subjectType);
    setSelectedSubjectName(dept.subjectName);
    setEditIndex(index); // Set the edit index to the current card's index
  };

  const handleSave = (index) => {
    if (selectedDays.length === 0) {
      Alert.alert("Please select a day.");
      return;
    }

    let allTimeSlotsAvailable = true;
    selectedDays.forEach((day) => {
      if (!isTimeSlotAvailable(day, selectedTime)) {
        Alert.alert(
          `${day} is not vacant at ${selectedTime} to add this subject`
        );
        allTimeSlotsAvailable = false;
      }
    });

    if (allTimeSlotsAvailable) {
      const updatedDepartments = [...departments];
      updatedDepartments[index] = {
        ...updatedDepartments[index],
        day: selectedDays[0], // Assuming only one day is selected for edit
        time: selectedTime,
        subjectType: selectedSubjectType,
        subjectName: selectedSubjectName,
      };
      setDepartments(updatedDepartments);
      Alert.alert("Entry has been updated");

      // Reset state
      setSelectedDays([]);
      setSelectedSubjectType("Null");
      setSelectedSubjectName("Choose SubjectType First");
      setEditIndex(null);
    }
  };

  const handleDelete = (index) => {
    Alert.alert(
      "Are you sure you want to delete?",
      "",
      [
        {
          text: "Cancel",
          style: "cancel",
        },
        {
          text: "Yes",
          onPress: () => {
            setDepartments(departments.filter((_, i) => i !== index));
          },
        },
      ],
      { cancelable: false }
    );
  };

  return (
    <ScrollView style={{ backgroundColor: "#FFF5EE" }}>
      <ScrollView horizontal contentContainerStyle={styles.dayPickerContainer}>
        {[
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday",
        ].map((day) => (
          <DayButton
            key={day}
            day={day}
            selected={selectedDays.includes(day)}
            onPress={() => toggleDay(day)}
          />
        ))}
      </ScrollView>

      {selectedDays.length > 0 && (
        <View>
          <View style={styles.pickerContainer}>
            <RNPicker
              selectedValue={selectedSubjectType}
              onValueChange={(itemValue) => {
                setSelectedSubjectType(itemValue);
                if (itemValue === "Null") {
                  setSelectedSubjectName("Choose SubjectType First");
                } else {
                  setSelectedSubjectName("Choose subject name");
                }
              }}
            >
              {subjectTypes.map((type, index) => (
                <RNPicker.Item key={index} label={type} value={type} />
              ))}
            </RNPicker>
          </View>

          <View style={styles.pickerContainer}>
            <RNPicker
              selectedValue={selectedSubjectName}
              onValueChange={(itemValue) => setSelectedSubjectName(itemValue)}
              enabled={selectedSubjectType !== "Null"}
            >
              {selectedSubjectType === "Null" ? (
                <RNPicker.Item
                  label="Choose SubjectType First"
                  value="Choose SubjectType First"
                  color="gray"
                />
              ) : (
                subjectNames.map((name, index) => (
                  <RNPicker.Item key={index} label={name} value={name} />
                ))
              )}
            </RNPicker>
          </View>

          <View style={styles.pickerContainer}>
            <RNPicker
              selectedValue={selectedTime}
              onValueChange={(itemValue) => setSelectedTime(itemValue)}
            >
              {times.map((time, index) => (
                <RNPicker.Item key={index} label={time} value={time} />
              ))}
            </RNPicker>
          </View>

          <TouchableOpacity
            style={styles.addButton}
            onPress={
              editIndex !== null ? () => handleSave(editIndex) : addDepartment
            }
          >
            <Text style={styles.dayButtonText}>
              {editIndex !== null ? "Save Changes" : "Add Entries"}
            </Text>
          </TouchableOpacity>
        </View>
      )}

      {[
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday",
      ].map((day) => (
        <View key={day} style={styles.dayEntriesContainer}>
          <TouchableOpacity
            style={[styles.dayButton, { backgroundColor: "purple" }]}
            onPress={() => toggleDayEntriesVisibility(day)}
          >
            <Text style={styles.dayButtonText}>
              {day}
              {dayEntriesVisibility[day] ? (
                <AntDesign
                  name="caretup"
                  size={20}
                  color="white"
                  style={{ paddingLeft: 10 }}
                />
              ) : (
                <AntDesign
                  name="caretdown"
                  size={20}
                  color="white"
                  style={{ paddingLeft: 10 }}
                />
              )}
            </Text>
          </TouchableOpacity>

          {dayEntriesVisibility[day] &&
            (departments.filter((dept) => dept.day === day).length > 0 ? (
              departments
                .filter((dept) => dept.day === day)
                .map((dept, index) => (
                  <View key={index} style={styles.card}>
                    <Text style={styles.cardText}>{dept.time}</Text>
                    <Text style={styles.cardText}>{dept.subjectName}</Text>
                    {dept.subjectType !== "Null" && (
                      <Text style={styles.cardText}>({dept.teacherName})</Text>
                    )}
                    <View style={styles.cardActions}>
                      <TouchableOpacity onPress={() => handleEdit(index)}>
                        <AntDesign name="edit" size={24} color="black" />
                      </TouchableOpacity>
                      <TouchableOpacity onPress={() => handleDelete(index)}>
                        <AntDesign name="delete" size={24} color="black" />
                      </TouchableOpacity>
                    </View>
                  </View>
                ))
            ) : (
              <Text>No entries</Text>
            ))}
        </View>
      ))}
    </ScrollView>
  );
};

export default AdminTimetableView;

const styles = StyleSheet.create({
  dayPickerContainer: {
    flexDirection: "row",
    padding: 10,
  },
  dayButton: {
    padding: 10,
    margin: 5,
    borderRadius: 5,
  },
  dayButtonText: {
    color: "white",
  },
  addButton: {
    backgroundColor: "green",
    padding: 10,
    margin: 10,
    borderRadius: 5,
    alignItems: "center",
  },
  pickerContainer: {
    margin: 10,
    borderColor: "gray",
    borderWidth: 1,
    borderRadius: 5,
  },
  tableContainer: {
    marginTop: 20,
  },
  card: {
    backgroundColor: "#EADDCA",
    padding: 10,
    marginVertical: 5,
    borderRadius: 5,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 5,
  },
  cardText: {
    fontSize: 16,
    color: "#CD7F32",
  },
  cardActions: {
    flexDirection: "row",
    justifyContent: "flex-end",
  },
  dayEntriesContainer: {
    marginVertical: 10,
  },
});

//-----------------------------------------------------------------------------------------------------------------------
      <RNPicker
        selectedValue={school}
        onValueChange={(itemValue) => setSchool(itemValue)}
        style={styles.picker}
        itemStyle={styles.pickerItem}
      >
        <RNPicker.Item label="Select School" value="" />
        {timetableData.map((item) => (
          <RNPicker.Item
            key={item.SchoolName}
            label={item.SchoolName}
            value={item.SchoolName}
          />
        ))}
      </RNPicker>

      {school && (
        <RNPicker
          selectedValue={department}
          onValueChange={(itemValue) => setDepartment(itemValue)}
          style={styles.picker}
          itemStyle={styles.pickerItem}
        >
          <RNPicker.Item label="Select Department" value="" />
          {timetableData.find((item) => item.SchoolName === school)
            ?.Departments &&
            Object.keys(
              timetableData.find((item) => item.SchoolName === school)
                .Departments
            ).map((dept) => (
              <RNPicker.Item key={dept} label={dept} value={dept} />
            ))}
        </RNPicker>
      )}

      {department && (
        <RNPicker
          selectedValue={semester}
          onValueChange={(itemValue) => setSemester(itemValue)}
          style={styles.picker}
          itemStyle={styles.pickerItem}
        >
          <RNPicker.Item label="Select Semester" value="" />
          {timetableData.find((item) => item.SchoolName === school)
            ?.Departments[department] &&
            Object.keys(
              timetableData.find((item) => item.SchoolName === school)
                .Departments[department]
            ).map((sem) => <RNPicker.Item key={sem} label={sem} value={sem} />)}
        </RNPicker>
      )}

      {semester && (
        <RNPicker
          selectedValue={subject}
          onValueChange={(itemValue) => {
            if (subjectType === "Null") {
              resetSelectedSubject(); // Reset the selected subject if Subject Type is "Null"
            } else {
              setSubject(itemValue); // Set the selected subject
            }
          }}
          style={styles.picker}
          itemStyle={styles.pickerItem}
        >
          <RNPicker.Item label="Select Subject" value="" />
          {timetableData.find((item) => item.SchoolName === school)
            ?.Departments[department][semester] &&
            timetableData
              .find((item) => item.SchoolName === school)
              .Departments[department][semester].map((sub) => (
                <RNPicker.Item
                  key={sub.SubjectCode}
                  label={sub.SubjectName}
                  value={sub.SubjectName}
                />
              ))}
        </RNPicker>
      )}
      <Text style={styles.teacherText}>Teacher Name</Text>